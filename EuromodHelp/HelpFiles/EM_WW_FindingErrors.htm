<!DOCTYPE html>
<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<link rel="stylesheet" href="files/style.css" />
<title>Finding an error</title>
</head>

<body>

<h1>Finding an error</h1>

<p>An error message of the EUROMOD executable has the following format:</p>

<table class="error">
	<tr>
		<td>Error:</td>
		<td>Variable or incomelist 'borer' not defined.</td>
	</tr>
	<tr>
		<td>System:</td>
		<td>at_2011</td>
	</tr>
	<tr>
		<td>Policy:</td>
		<td>tin_at; row 7</td>
	</tr>
	<tr>
		<td>Function:</td>
		<td>arithop; row 7.3</td>
	</tr>
	<tr>
		<td>Parameter:</td>
		<td>formula; row 7.3.2</td>
	</tr>
	<tr>
		<td>Value:</td>
		<td>borer</td>
	</tr>
	<tr>
		<td>Identifier:</td>
		<td>b10e103f-0652-4a77-b2ec-d021636b98f4</td>
	</tr>
</table>

<p>The error can be found in the user interface by either looking for the indicated row numbers or by searching the parameter or function by its identifier. The <i>Search by Identifier</i>
dialog serves the latter approach. To open the dialog, select the ribbon <i>Country Tools</i> and press the button <i>Search by ID</i> in the <i>Search</i> group. Copy the <i>Identifier</i> (b10e103f-0652-4a77-b2ec-d021636b98f4 in the example) from the error message to the field <i>Identifier</i> and press <i>Find</i> to jump to the component.</p>

<p>Note that the dialog does not support finding an error produced by running a system with an add-on (see <a href="EM_WW_RunDialog.htm">Working with EUROMOD - Running EUROMOD</a> paragraph <i>Running add-on systems</i>). In the case of add-on-systems the row numbers indicated by the error message refer to the order in which components are actually processed. This order is generated at run-time and therefore not visible &quot;from outside&quot;. Similar is true for the identifier, as it is internally generated by the user interface and not
visible from outside either.</p>

<h5>Some comments on EUROMOD's error reporting</h5>

<p>EUROMOD distinguishes two phases of error handling and two (actually three) types of errors. Phase one of error handling comprises reading and checking parameters and reading data - let's refer to it as <strong>read-time</strong> - while phase two concerns computing the necessary calculations and outputting results - let's refer to it as <strong>run-time</strong>. The two types of errors are <strong>critical</strong> and <strong>non-critical errors</strong> (the latter also referred to as <strong>warnings</strong>).</p>

<p>During read-time the model gathers all errors, independent of type, without stopping. Once the phase is finalised it always stops if there are critical errors, to issue respective error messages. If there are only non-critical errors it only stops if the box <i>Do not stop on non-critical errors</i> in the <i>Advanced Options</i> of the <i>Run EUROMOD</i> dialog is unticked (see <a href="EM_WW_RunDialog.htm">Working with EUROMOD - Running EUROMOD</a> paragraph <i>Advanced settings</i>), otherwise it continues. During run-time EUROMOD always stops immediately once a critical error occurs. Whether it stops on non-critical errors again depends on ticking <i>Do</i><i> not stop on non-critical errors</i>: if not ticked it stops immediately, if ticked it continues and issues the gathered error messages after finishing the phase or once a critical error occurs. Finally, a third type of error exists - this concerns &quot;very critical&quot; errors, which necessitate an immediate stop, independent of the phase.</p>

<p>Concluding, it may be informative to learn, which errors are classified as critical or non-critical by the model. Intuitively speaking one could say that EUROMOD is very strict during read-time and classifies most errors as critical. In contrast the model is rather lenient during run-time and considers errors as non-critical, as long as it finds a way to continue its calculations (warnings inform about the respective handling in their error message). The motivation for this is found in the fact that phase two takes much longer than phase one, i.e. the model tries to immediately inform the users after the short read-time that something went wrong, while they may confidently go for a coffee during run-time and will get a summary of errors once they are back. In reality running one system of a country (with a not too big dataset) usually takes a few minutes, which is unfortunately too short for the coffee. However, one could imagine a reform that comprises a lot of countries, systems or loops. In that case the user may first get the parameters right and have time for her coffee, while running this big reform.</p>

<p>&nbsp;</p>

</div>

</body>

</html>
