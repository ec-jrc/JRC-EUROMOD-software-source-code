<!DOCTYPE html>
<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<link rel="stylesheet" href="files/style.css" />
<title>Summary of parameters for function IlArithOp</title>
</head>

<body>

<h1>Summary of parameters for function IlArithOp</h1>

<p>Allows for an operation, using the variables of one or more analogue input-incomelists, and writing the results to variables of an analogue output-incomelist.</p>
<p>The variables included in the calculations are specified by the incomlist defined by parameter 'Base_ILName'.<br>
The operation carried out is defined by parameter 'Formula' and allows for three types of placeholders:
<ul>
  <li><i>BASE_IL_COMPONENT</i> refers to a variable in the incomelist defined by parameter 'Base_ILName'</li>
  <li><i>IL_COMPONENT [il-identifier]</i> refers to a variable in the incomelist defined by parameter 'ILName'. 
  As this parameter is not unique [il-identifier] indicates the name of the incomelist or the group-number.<br>
  The variable within the incomelist corresponds to the variable in the incomelist defined by 'Base_ILName' in the sense that they share the <i>core-name</i>. 
  This is the variable-name without the corresponding prefix (parameters 'Base_Prefix'/'Prefix') and postfix (parameters 'Base_Postfix'/'Postfix').</li>
  <li><i>OUT_IL_COMPONENT</i> refers to a variable in the incomelist defined by parameter 'Out_ILName'.<br>
  Using this placeholder requires the incomelist defined by 'Out_ILName' to exist before the IlArithOp is carried out (usually it is generated by another IlArithOp).<br>
  The variable within the incomelist corresponds to the variable in the incomelist defined by 'Base_ILName' in the sense that they share the <i>core-name</i>.</li>
</ul>
The results are written to the variables of the incomelist defined by 'Out_ILName'.<br>
If this incomelist exists before the IlArithOp is carried out, variables are overwritten.<br>
If it does not exist, it is generated. The content is formed by the, also generated, variables which hold the results of the calculations.
</p>
<p>See <a href="EM_FC_IlArithOp.htm">The special function IlArithOp</a>) for a complete and more detailed explanation.

<h4>Function Specific Parameters</h4>
<table class="info">
	<tr>
		<th>Name</th>
		<th>Type</th>
		<th>Group</th>
		<th>Compulsory</th>
		<th>Unique</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>Base_ILName</td>
		<td>incomelist</td>
		<td></td>
		<td>yes</td>
		<td>yes</td>
		<td></td>
		<td>Incomelist specifying the variables on which the arithmetic operation takes place.</td>
	</tr>
	<tr>
		<td>Base_Prefix</td>
		<td>text</td>
		<td></td>
		<td>yes (if Base_Postfix is not defined)</td>
		<td>yes</td>
		<td></td>
		<td>All variables in (decomposed) incomelist 'Base_ILName' must start with this prefix.</td>
	</tr>
	<tr>
		<td>Base_Postfix</td>
		<td>text</td>
		<td></td>
		<td>yes (if Base_Prefix is not defined)</td>
		<td>yes</td>
		<td></td>
		<td>All variables in (decomposed) incomelist 'Base_ILName' must end with this postfix.</td>
	</tr>
	<tr>
		<td>ILName</td>
		<td>incomelist</td>
		<td>IL</td>
		<td>within group</td>
		<td>within group</td>
		<td></td>
		<td>Additional incomelist containing variables used in the arithmetic operation (referred to by IL_COMPONENT).</td>
	</tr>
	<tr>
		<td>Prefix</td>
		<td>text</td>
		<td>IL</td>
		<td>within group (if Postfix is not defined)</td>
		<td>within group</td>
		<td></td>
		<td>All variables in (decomposed) incomelist 'ILName' with same group must start with this prefix.</td>
	</tr>
	<tr>
		<td>Postfix</td>
		<td>text</td>
		<td>IL</td>
		<td>within group (if Prefix is not defined)</td>
		<td>within group</td>
		<td></td>
		<td>All variables in (decomposed) incomelist 'ILName' with same group must end with this postfix.</td>
	</tr>
	<tr>
		<td>Formula</td>
		<td><a href="EM_FC_Formula.htm">formula</a></td>
		<td></td>
		<td>yes</td>
		<td>yes</td>
		<td></td>
		<td>Arithmetic operation to be performed, allowing for placeholders 'BASE_IL_COMPONENT', 'IL_COMPONENT[il-identifier]' and 'OUT_IL_COMPONENT'.</td>
	</tr>
	<tr>
		<td>Out_ILName</td>
		<td>text</td>
		<td></td>
		<td>yes</td>
		<td>yes</td>
		<td></td>
		<td>Name of the incomelist to contain the result variables. Will be created if it does not exist.</td>
	</tr>
	<tr>
		<td>Out_Prefix</td>
		<td>text</td>
		<td></td>
		<td>yes (if Out_Postfix is not defined)</td>
		<td>yes</td>
		<td></td>
		<td>All variables in incomelist 'Out_ILName' must start with this prefix, if the incomelist exists; if not they will be created with this prefix.</td>
	</tr>
	<tr>
		<td>Out_Postfix</td>
		<td>text</td>
		<td></td>
		<td>yes (if Out_Prefix is not defined)</td>
		<td>yes</td>
		<td></td>
		<td>All variables in incomelist 'Out_ILName' must end with this postfix, if the incomelist exists; if not they will be created with this postfix.</td>
	</tr>
	<tr>
		<td>WarnIfDuplicateDefinition</td>
		<td>bool</td>
		<td></td>
		<td>no</td>
		<td>yes</td>
		<td>yes</td>
		<td>This will suppress all warnings due to duplicate definition of variables within this incomelist.</td>
	</tr>
	<tr>
		<td>ForceMonetaryOutput</td>
		<td>bool</td>
		<td></td>
		<td>no</td>
		<td>yes</td>
		<td>no</td>
		<td>Force the resulting new variables to be monetary, even if the base variables were non-monetary.</td>
	</tr>
</table>

<h4>Common Parameters</h4>
<table class="info">
	<tr>
		<th>Name</th>
		<th>Type</th>
		<th>Group</th>
		<th>Compulsory</th>
		<th>Unique</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>Run_Cond</td>
		<td><a href="EM_FC_Formula.htm">condition</a></td>
		<td></td>
		<td>no</td>
		<td>yes</td>
		<td></td>
		<td>Function is only carried out if the condition is fulfilled. The parameter is intended to be a conditional switch. Thus the condition must not be individual or household based, but refer to a specific processing state or other global condition.</td>
	</tr>
	<tr>
		<td>#_LowLim</td>
		<td><a href="EM_FC_Formula.htm">formula</a></td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td>-999999999999.99</td>
		<td>Footnote parameter for the further specification of an operand: replaces operand if operand is smaller.</td>
	</tr>
	<tr>
		<td>#_UpLim</td>
		<td><a href="EM_FC_Formula.htm">formula</a></td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td>999999999999.99</td>
		<td>Footnote parameter for the further specification of an operand: replaces operand if operand is higher.</td>
	</tr>
	<tr>
		<td>#_LimPriority</td>
		<td>categorical</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td>upper</td>
		<td>Footnote parameter for the further specification of an operand:<br>Possible values:<br>If upper limit (#_UpLim) is smaller than lower limit (#_LowLim) ...<br>- upper: ... upper limit dominates;<br>- lower: ... lower limit dominates;<br>- not defined: ... a warning is issued.</td>
	</tr>
	<tr>
		<td>#_Amount</td>
		<td>amount</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td></td>
		<td>Footnote parameter for the further specification of an operand: indicates the numeric value of an operand.</td>
	</tr>
	<tr>
		<td>#_Level</td>
		<td>taxunit</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td></td>
		<td>Footnote parameter for the further specification of an operand: indicates an alternative assessment unit for an operand.</td>
	</tr>
	<tr>
		<td>#_AgeMin</td>
		<td>amount</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td>-999999999999</td>
		<td>Parameter of several queries (e.g. nDepChildrenInTu).</td>
	</tr>
	<tr>
		<td>#_AgeMax</td>
		<td>amount</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td>999999999999</td>
		<td>Parameter of several queries (e.g. nDepChildrenInTu).</td>
	</tr>
	<tr>
		<td>#_DataBasename</td>
		<td>text</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td></td>
		<td>Parameter of query IsUsedDatabase.</td>
	</tr>
	<tr>
		<td>#_N</td>
		<td>amount</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td></td>
		<td>Parameter of query IsNtoMchild.</td>
	</tr>
	<tr>
		<td>#_M</td>
		<td>amount</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td></td>
		<td>Parameter of query IsNtoMchild.</td>
	</tr>
	<tr>
		<td>#_Val</td>
		<td>variable or incomelist</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td></td>
		<td>Parameter of query HasMaxValInTu.</td>
	</tr>
	<tr>
		<td>#_Income</td>
		<td>variable or incomelist</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td></td>
		<td>Parameter of several queries (e.g. GetPartnerIncome).</td>
	</tr>
	<tr>
		<td>#_Info</td>
		<td>variable</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td></td>
		<td>Parameter of several queries (e.g. GetPartnerInfo).</td>
	</tr>
	<tr>
		<td>#_Unique</td>
		<td>yes/no</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td></td>
		<td>Parameter of query HasMaxValInTu.</td>
	</tr>
	<tr>
		<td>#_Adults_Only</td>
		<td>yes/no</td>
		<td></td>
		<td>no</td>
		<td>no (but group must differ)</td>
		<td></td>
		<td>Parameter of query HasMaxValInTu.</td>
	</tr>
</table>
</body>
</html>
