<!DOCTYPE html>
<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<link rel="stylesheet" href="files/style.css" />
<title>The special function AddHHMembers</title>
</head>

<body>

<div class=Section1>

<h1>The special function AddHHMembers</h1>

<p class="EM3only">This function is only available with EM3.</p>

<p>As the name suggests, the function AddHHMemembers allows adding new members to households. To get an idea, let’s start with an example:</p>

<table class="spine">
	<caption>Example 1:</caption>
	<tr class="policy">
		<td>Policy</td>
		<td>Grp/No</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>AddHHMembers</td>
		<td></td>
		<td>on</td>
		<td></td>
	</tr>
	<tr>
		<td>Add_Who</td>
		<td>1</td>
		<td>Partner</td>
		<td></td>
	</tr>
	<tr>
		<td>PartnerCond</td>
		<td>1</td>
		<td>{ dag = 30 } & { dgn = 1 } & { idpartner <= 0 }</td>
		<td></td>
	</tr>
	<tr>
		<td>dag</td>
		<td>1</td>
		<td>30</td>
		<td></td>
	</tr>
	<tr>
		<td>dgn</td>
		<td>1</td>
		<td>0</td>
		<td></td>
	</tr>
</table>

<p>In this example, each household containing a person fulfilling the condition, i.e. to be a 30 year old male without a partner, 
gets a new female member, which is 30 years old and will be the partner of the 30 year old male.</p>

<p>There are in fact three modes of adding household members:</p>

<h4>Modes of adding</h4>

<p>These are determined by the parameter 'Add_Who', which can take the values 'Partner', 'Child' or 'Other'.</p>

<p><b>Adding partners:</b> As the example above illustrates, 'Add_Who = Partner' requires a 'PartnerCond'. 
If this condition is fulfilled by any (existing) household member, a new person is added to the household.<br>
The variable idPartner of the new person is (system-)set to the idPerson of the "triggering" household member (i.e. the household member fulfilling the condition). 
However, whether this is also true vice-versa, i.e. whether the idPartner of the triggering person is set to the idPerson of the new person, depends. 
If the triggering person already has a partner, it keeps this partner. Note that this means that (s)he has now a main partner (the old one) and a secondary partner (the new one). 
The model may comment this by warnings: 'more than one possible partner found …'. The example above avoids this by the condition { idpartner <= 0 }.<br>
Maybe this is obvious, but it may be worth mentioning, that more than one person can be added to the household upon this 'Add_Who'. 
In fact the number of new persons corresponds to the number of (existing) persons in the household, who fulfil the condition.<br>
How to further specify the new persons, except from couple issues, i.e. determine their age, gender, etc., 
is explained under paragraph 'Characterising new persons and system-set variables'.</p>

<p><b>Adding children</b> is in many aspects similar to adding partners, thus we can concentrate on the differences. 
First, one needs to set 'Add_Who = Child' (instead of 'Partner') and use 'ParentCond' (instead of 'PartnerCond').<br>
This time, the triggering person becomes the parent of the new child. That means, if the triggering person is female, the new child's idMother is set to her idPerson. 
Then again, if the triggering person is male, the new child's idFather is set to his idPerson.<br>
It is tried (by default) to find a second parent for the child. That means, if the first parent (the triggering person) has a partner (defined by idPartner) 
and this partner does not have the same gender as the first parent, the child's other parent-id (i.e. either idMother or idFather) is set to this idPartner. 
One can avoid this behaviour, i.e. generate "single parent children", by setting the parameter 'IsPartnerParent' to 'no'.<br>
Again the number of children added by this 'Add_Who' corresponds to the number of (existing) persons in the household, who fulfil the condition.<br>
It is also probably necessary to further specify the new children, otherwise they are zero year old girls, but this is explained 
under paragraph 'Characterising new persons and system-set variables'.</p>

<p><b>Adding other persons:</b> 'Add_Who = Other' allows to add other persons to the household than partners and children. 
In this case one needs to use the 'HHCond' (instead of the 'PartnerCond' or 'ParentCond'). 
As the name suggests this condition must be fulfilled by the household and not by single persons. 
Thus there are no triggering persons and the 'Add_Who' adds one person if the condition is fulfilled and no person if not.<br>
There is more about the concrete meaning of "the household must fulfil the condition" under paragraph 'Taxunits', 
and more about specifying the new person under paragraph 'Characterising new persons and system-set variables'.</p>

<h4>"Characterising" new persons and system-set variables</h4>

<p>There are seven variables which are system-set: idHH, idPerson, dwt, dct, idFather, idMother and idPartner. 
The last three depend on the 'Add_Who' parameter as described above. Household-id (idHH), weight (dwt) and country (dct) 
are copied from existing household members (as there is no question about their value). The person-id (idPerson) is just the next available id, 
i.e. max(idPerson) in household plus one.</p>

<p>Any other variable is initially set to zero, but one can specify another value as illustrated in the examples above and below. One can use formulas for doing so, 
but it's probably good to know on which level they operate – this is explained in more detail under paragraph 'Taxunits'.</p>

<p>Maybe not very relevant, but just to mention, one cannot initialise variables that are not used anywhere else. For example, if one tries to set stm12_s = 4711, 
but stm12_s is not used anywhere else, this would lead to the error message '… variable stm12_s does not exist.'</p>

<p>Maybe a bit more relevant, but only for tricky cases: the programme does not allow to "manually" initialise idHH, idPerson, dwt and dct. 
It is however possible to do this for idPartner, idMother and idFather.</p>

<h4>'Add_Who' groups</h4>

<p>In fact one can add partners, children and other persons within the same AddHHMembers function, 
because the parameter 'AddWho' plus the appropriate condition parameter plus the parameters for variable specification form groups. 
The following example, an extension of the initial example, may illustrate this:</p>

<table class="spine">
	<caption>Example 2:</caption>
	<tr class="policy">
		<td>Policy</td>
		<td>Grp/No</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>AddHHMembers</td>
		<td></td>
		<td>on</td>
		<td></td>
	</tr>
	<tr>
		<td>Add_Who</td>
		<td>1</td>
		<td>Partner</td>
		<td></td>
	</tr>
	<tr>
		<td>PartnerCond</td>
		<td>1</td>
		<td>{ dag = 30 } & { dgn = 1 } & { idpartner <= 0 }</td>
		<td></td>
	</tr>
	<tr>
		<td>dag</td>
		<td>1</td>
		<td>30</td>
		<td></td>
	</tr>
		<tr>
		<td>Add_Who</td>
		<td>2</td>
		<td>Child</td>
		<td></td>
	</tr>
	<tr>
		<td>ParentCond</td>
		<td>2</td>
		<td>{ dag = 30 } & { dgn = 1 } & { idpartner <= 0 }</td>
		<td></td>
	</tr>
	<tr>
		<td>dag</td>
		<td>2</td>
		<td>6</td>
		<td></td>
	</tr>
</table>

<p>Now the 30 year old males do not only get 30 year old partners but in addition 6 year old daughters.</p>

<p>In fact this example may be good for illustration but less for real application, because one probably wants the new partners to be the mothers of the new children. 
This would not be the case, because it is rather important to note that any condition and formula refers to the initial household. 
In the initial household the males do not have partners, thus the children would only have a father. 
This can be easily changed by just using two subsequent AddHHMembers functions, where in the first the partners are added and in in the second the children. 
A more meaningful application of groups may be to add more than one child to a person.</p>

<p>Just a hint: it may be a good idea to take special care of correct group-number-setting. 
The programme tries of course to detect errors, but some may not be evident for a machine.</p>

<h4>Taxunits</h4>

<p>In the explanations above units of assessment were rather imprecisely referred to as individual or household, 
and in principle that is what is true for the function AddHHMembers - it does not use specific taxunits, but two simple and not further specified taxunits, 
one for individuals and one for households. An example may illustrate the consequences. 
Let’s assume we want to add an au-pair to each household that has three children or more by this:</p>

<table class="spine">
	<caption>Example 3:</caption>
	<tr class="policy">
		<td>Policy</td>
		<td>Grp/No</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>AddHHMembers</td>
		<td></td>
		<td>on</td>
		<td></td>
	</tr>
	<tr>
		<td>Add_Who</td>
		<td>1</td>
		<td>Other</td>
		<td></td>
	</tr>
	<tr>
		<td>HHCond</td>
		<td>1</td>
		<td>{ nDepChildrenInTu >= 3 }</td>
		<td></td>
	</tr>
	<tr>
		<td>dag</td>
		<td>1</td>
		<td>19</td>
		<td></td>
	</tr>
</table>

<p>The above has absolutely no effect, because no household has children as the simple default household has no child definition and as a consequence nobody is a child. 
The following will work for the purpose described above, because the OECD household has a definition of children (age<14).</p>

<table class="spine">
	<caption>Example 4:</caption>
	<tr class="policy">
		<td>Policy</td>
		<td>Grp/No</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>AddHHMembers</td>
		<td></td>
		<td>on</td>
		<td></td>
	</tr>
	<tr>
		<td>Add_Who</td>
		<td>1</td>
		<td>Other</td>
		<td></td>
	</tr>
	<tr>
		<td>HHCond</td>
		<td>1</td>
		<td>{ nDepChildrenInTu#2 >= 3 }</td>
		<td></td>
	</tr>
	<tr>
		<td>#_Level</td>
		<td>2</td>
		<td>tu_hh_oecd_co</td>
		<td></td>
	</tr>
	<tr>
		<td>dag</td>
		<td>1</td>
		<td>19</td>
		<td></td>
	</tr>
</table>

<p>The motivation to implement it like this was to not overload the function and outsource any complicated taxunit issues to other functions, 
which can overtake preparation work for the AddHHMembers function. Let's now fully specify the rules:</p>

<p><b>Rule 1:</b> The conditions 'PartnerCond' and 'ParentCond' use a simple individual taxunit. 
On the one hand, this means that some queries may not work as intuitively assumed, on the other hand one can change to any other taxunit with the required specifications.</p>

<p>In the example below each family as defined by tu_sben_family_sl gets a new 0 year old girl (as default dag and dgn are set to 0), 
provided the "family" has a female partner aged between 30 and 35 and the family does not yet have more than one child.</p>

<table class="spine">
	<caption>Example 5:</caption>
	<tr class="policy">
		<td>Policy</td>
		<td>Grp/No</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>AddHHMembers</td>
		<td></td>
		<td>on</td>
		<td></td>
	</tr>
	<tr>
		<td>Add_Who</td>
		<td>1</td>
		<td>Child</td>
		<td></td>
	</tr>
	<tr>
		<td>ParentCond</td>
		<td>1</td>
		<td>{IsPartner#2} & {dgn=0} & {dag>=30} & {dag<=35} & {nDepChildrenInTu#2<=1}</td>
		<td></td>
	</tr>
	<tr>
		<td>#_Level</td>
		<td>2</td>
		<td>tu_sben_family_sl</td>
		<td></td>
	</tr>
</table>

<p><b>Rule 2:</b> The condition 'HHCond' and the formulas for initialising variables use a simple household taxunit <a href="#_ftn1" name="_ftnref1" title="">[1]</a>. 
As the au-pair example above illustrates, this still allows changing to another household taxunit which provides the required specifications. 
It is however not possible to change to smaller units (this is the rule for the '#_Level' parameter, which does not allow changing to smaller units than the default unit). 
If necessary, one can use other functions and features to prepare for the AddHHMembers function.</p>

<h4>Memo of points to take care of</h4>

<p>This memo may help to remember the important and/or not immediately intuitive points.</p>

<ul>

<li>Parameters 'ParentCond' and 'PartnerCond' use a simple individual taxunit. One can change to any other taxunit using parameter '#_level'. 
Queries may require usage with care.</li>

<li>Parameter 'HHCond' and formulas for initialising variables use a simple household taxunit. One can only change to other household taxunits using parameter '#_level'. 
More complicated taxunit operation may require preparation by using other functions.</li>

<li>All conditions and formulas refer to the original household, before adding any new person (where original means at the time before the function is carried out).</li>

<li>Variables idHH, idPerson, dwt and dct are system-set.</li>

<li>If parameter 'Add_who = Partner', the following holds:<br>
idPartner of new person = idPerson of person fulfilling 'PartnerCond'<br>
idPartner of fulfilling person = idPerson of new person, if idPartner <= 0<br></li>

<li>If parameter 'Add_who = Child', the following holds:<br>
idMother of new child = idPerson of person fulfilling 'ParentCond' if she is female<br>
idFather of new child = idPerson of person fulfilling 'ParentCond' if he is male<br>
If parameter 'IsPartnerParent = yes' (default) the not yet set parent-id (idMother/idFather) is set to the idPartner of the person fulfilling 'ParentCond', 
provided idPartner > 0 and the gender of the partner is different from the first parent.</li>

<li>Take care of setting group-numbers appropriately.</li>

</ul>

<p>A final note, which is actually more or less only a technical detail, but maybe worth knowing. 
Using the function AddHHMembers will usually prevent full parallel runs. 
This is visible in the run-log, which does not show percentages but names of functions. 
Apart from that the run may be slightly slower. 
The only way to allow for full parallel run is to use the function either at the very beginning of the spine or immediately before the output policy.</p>

<p class="footnote"><a href="#_ftnref1" name="_ftn1" title="">[1]</a> 
The unit just contains all HH-members, with the first being the head. There are no other specifications.</p>

</div>

</body>

</html>
