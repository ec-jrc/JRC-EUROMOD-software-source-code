<!DOCTYPE html>
<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<link rel="stylesheet" href="files/style.css" />
<title>The special function Totals</title>
</head>

<body>

<h1>The special function Totals</h1>

<p>Totals
allows for the calculation of aggregates (i.e. sums, means, etc.) of variables or
incomelists over the whole population (represented by the dataset) or a
selected subgroup. The function does not aim to provide a statistical package.
Rather, the aggregates are intended to serve the calculations, as illustrated
by example 1. It demonstrates an increase in Simpleland’s child benefit, which
is financed by a respective raise in income tax. Budget neutrality is achieved
by gradually increasing income tax until the higher expenses for the child
benefit are covered, which is implemented by means of a loop and Totals to check whether the budget is
already balanced.</p>

<table class="spine">
	<caption>Example 1: <span style="color: #FF0000;">to be revised (use of ChangeParam with old identifiers)</caption>
	<tr class="policy">
		<td>Policy</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>Loop</td>
		<td class="on">on</td>
		<td>loop function could be placed wherever desired</td>
	</tr>
	<tr>
		<td>loopid</td>
		<td>budgneut</td>
		<td></td>
	</tr>
	<tr>
		<td>first_pol</td>
		<td>sic_sl</td>
		<td></td>
	</tr>
	<tr>
		<td>last_pol</td>
		<td>cb_reform_sl</td>
		<td>assumes that the present policy is called cb_reform_sl</td>
	</tr>
	<tr>
		<td>breakcond</td>
		<td>{$totnew_ils_dispy&lt;$totold_ils_dispy}</td>
		<td>exit condition: tax increase covers raised expenditure</td>
	</tr>
	<tr class="function">
		<td>Totals</td>
		<td class="on">on</td>
		<td>compute total disposable income before the reform</td>
	</tr>
	<tr>
		<td>run_cond</td>
		<td>{loopcount_budgneut=1}</td>
		<td></td>
	</tr>
	<tr>
		<td>varname_sum</td>
		<td>$totold</td>
		<td></td>
	</tr>
	<tr>
		<td>agg_il</td>
		<td>ils_dispy</td>
		<td></td>
	</tr>
	<tr>
		<td>TAX_UNIT</td>
		<td>individual_sl</td>
		<td></td>
	</tr>
	<tr class="function">
		<td>Totals</td>
		<td class="on">on</td>
		<td>compute total disp. inc. after each increase of the tax rate</td>
	</tr>
	<tr>
		<td>varname_sum</td>
		<td>$totnew</td>
		<td></td>
	</tr>
	<tr>
		<td>agg_il</td>
		<td>ils_dispy</td>
		<td></td>
	</tr>
	<tr>
		<td>TAX_UNIT</td>
		<td>individual_sl</td>
		<td></td>
	</tr>
	<tr class="function">
		<td>ChangeParam</td>
		<td class="on">on</td>
		<td></td>
	</tr>
	<tr>
		<td>param1_id</td>
		<td>sben_cb_sl_#5</td>
		<td>assuming the parameter is placed in row 5</td>
	</tr>
	<tr>
		<td>param1_condval</td>
		<td>500#m</td>
		<td>increase child benefit amount (in the 2<sup>nd</sup> iteration)</td>
	</tr>
	<tr>
		<td>param2_id</td>
		<td>it_sl_#6</td>
		<td>assuming the parameter is placed in row 6</td>
	</tr>
	<tr>
		<td>param2_condval</td>
		<td>0.2+loopcount_budgneut*0.1%</td>
		<td>increasing the tax rate by 0.1% in each loop</td>
	</tr>
</table>

<p>Note that variables generated by Totals can be used as any &quot;real&quot;
variables. They take the same value for all persons in the sample, even if the
aggregate is built for a sub-sample.</p>

<p>&nbsp;</p>

</div>

</body>

</html>
