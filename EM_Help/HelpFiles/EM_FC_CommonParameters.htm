<!DOCTYPE html>
<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<link rel="stylesheet" href="files/style.css" />
<title>Common Parameters</title>
</head>

<body>

<div class=WordSection1>

<h1>Common Parameters</h1>

<p>All or most of the policy functions and some of the system
and special functions provide common parameters. They can be classified into
four categories:</p>

<h4>Common
parameters affecting output</h4>

<p>The parameter <strong>output_var</strong>
allows for the indication of a variable for storing the result of the
function’s calculations. All policy functions provide this parameter. In
general the parameter is compulsory, i.e. the modeller must explicitly name a
variable that stores the function’s result. There is just one exception: The
function Elig has the
variable sel_s (s=system,
el=elig, _s=simulated) as its default output
variable. System functions in general have no <strong>output_var</strong>
parameter. Some but not all of the special functions provide an <strong>output_var</strong>
parameter – the descriptions of the functions in section <a
href="EM_FC_SummaryOfFunctions.htm">EUROMOD Functions - Summary of functions
and their parameters</a> indicate whether this is the case or not.</p>

<p>The parameter <strong>output_add_var</strong>
has the same functionality as the parameter output_var but, in contrast to output_var, where any existing value of the output
variable is overwritten, with output_add_var
the function result is added to any existing value of the output variable. The
parameter is not compulsory itself, but either output_var or output_add_var must be indicated. The parameter is provided by all functions, which provide the
parameter <strong>output_var</strong>, except for the function Elig (as it is not very
meaningful to add to a yes/no variable).</p>

<p>The parameter <strong>result_var</strong>
allows the indication of a &quot;second output variable&quot;. In general this
makes only sense in combination with the parameter output_add_var. Example 1, which is an extension of
example 3 in section <a href="EM_FC_InteractionsBetweenFunctions.htm">EUROMOD
Functions - Interactions between functions</a>, demonstrates the use of this
parameter.</p>

<table class="spine">
	<caption>Example 1:</caption>
	<tr class="policy">
		<td>Policy</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>ArithOp</td>
		<td class="on">on</td>
		<td>calculate health insurance contributions</td>
	</tr>
	<tr>
		<td>formula</td>
		<td>yem*0.05</td>
		<td>calculate health contributions as 5% of employment income</td>
	</tr>
	<tr>
		<td>result_var</td>
		<td>tsceehl_s</td>
		<td>write health contributions to variable for health sic</td>
	</tr>
	<tr>
		<td>output_var</td>
		<td>tscee_s</td>
		<td>write health contributions to general sic variable</td>
	</tr>
	<tr>
		<td>TAX_UNIT</td>
		<td>tu_individual_sl</td>
		<td></td>
	</tr>
	<tr class="function">
		<td>ArithOp</td>
		<td class="on">on</td>
		<td>calculate unemployment insurance contributions</td>
	</tr>
	<tr>
		<td>formula</td>
		<td>yem*0.03</td>
		<td>calculate unemployment contributions as 3% of employment income</td>
	</tr>
	<tr>
		<td>result_var</td>
		<td>tsceeui_s</td>
		<td>write health contributions to variable for unemployment sic</td>
	</tr>
	<tr>
		<td>output_add_var</td>
		<td>tscee_s</td>
		<td>add unemployment contributions to general sic variable</td>
	</tr>
	<tr>
		<td>TAX_UNIT</td>
		<td>tu_individual_sl</td>
		<td></td>
	</tr>
</table>
	
<p>The two functions in example 1
calculate employee social insurance contributions by adding health and
unemployment contributions into the variable tscee_s (t=tax, sc=social
contribution, ee=employee, _s=simulated). While in
example 3 of section <a href="EM_FC_InteractionsBetweenFunctions.htm">EUROMOD
Functions - Interactions between functions</a> the amount of the single
contributions was lost, in this example the parameter result_var is used to indicate variables which
store them: health contributions are stored in the variable tsceehl_s (hl=health insurance) and unemployment
contributions are stored in the variable tsceeui_s (ui=unemployment
insurance). In general that means that the variable indicated with the
parameter result_var takes
the function’s result. Accordingly, any possible existing value of the variable
is always overwritten. This optional parameter is provided by all functions,
which provide the parameter <strong>output_var</strong>.</p>

<h4>Common
parameters affecting &quot;eligibility&quot;</h4>

<p>Example 1 in section <a
href="EM_FC_InteractionsBetweenFunctions.htm">EUROMOD Functions - Interactions
between functions</a> provides an explanation for the parameter <strong>who_must_be_elig</strong>. This
explanation however does not mention which values (except from one_member) the parameter can
take on. These are:</p>

<ul>
	<li>one_member (or one): one member of the assessment unit must be eligible</li>
	<li>one_adult: one adult member of the assessment unit must be eligible</li>
	<li>all_members (or all or taxunit): all members of the assessment unit must be eligible</li>
	<li>all_adults: all adult members of the assessment unit must be eligible</li>
	<li>nobody: calculations are carried out for each assessment unit, this is the default if the parameter is not indicated</li>
</ul>

<p>&quot;assessment unit&quot; as well
as the concrete meaning of &quot;adult&quot; refers to the definition of the
assessment unit indicated by the parameter TAX_UNIT
(which is described in more detail below). &quot;eligible&quot;
means that the variable sel_s
is set to one for this person (usually by using the function Elig). More precisely, it is not
necessarily the variable sel_s,
which must be set to one, but the variable indicated by the parameter <strong><i>elig_var</i></strong>. Example 2 illustrates the use of an
alternative eligibility variable. If the parameter <i>elig_var</i> is not indicated the
variable sel_s is used by
the parameter <strong>who_must_be_elig</strong> as a default.</p>

<p>The optional parameters <strong>who_must_be_elig</strong>
and <i>elig_var</i>
are provided by all policy functions (even Elig). None of the system functions provides them.
For special functions the descriptions of the respective functions in section <a
href="EM_FC_SummaryOfFunctions.htm">EUROMOD Functions - Summary of functions
and their parameters</a> indicate whether this is the case or not.</p>

<table class="spine">
	<caption>Example 2:</caption>
	<tr class="policy">
		<td>Policy</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>Elig</td>
		<td class="on">on</td>
		<td>eligibility rule</td>
	</tr>
	<tr>
		<td>elig_cond</td>
		<td>{dag > 80}</td>
		<td>person must be aged older than 80</td>
	</tr>
	<tr>
		<td>output_var</td>
		<td>stm01_s</td>
		<td>write &quot;eligibility&quot; to a temporary variable</td>
	</tr>
	<tr>
		<td>TAX_UNIT</td>
		<td>tu_individual_sl</td>
		<td></td>
	</tr>
	<tr class="function">
		<td>ArithOp</td>
		<td class="on">on</td>
		<td>benefit calculation</td>
	</tr>
	<tr>
		<td>who_must_be_elig</td>
		<td>taxunit</td>
		<td>if assessment unit is individual, parameter can be set to "taxunit/all" or "one" with the same result</td>
	</tr>
	<tr>
		<td>elig_var</td>
		<td>stm01_s</td>
		<td>use same eligibility variable as above</td>
	</tr>
	<tr>
		<td>formula</td>
		<td>100#m</td>
		<td>the benefit amounts to 100 € per month</td>
	</tr>
	<tr>
		<td>output_var</td>
		<td>sin01_s</td>
		<td>write result to some intermediate variable</td>
	</tr>
	<tr>
		<td>TAX_UNIT</td>
		<td>tu_individual_sl</td>
		<td></td>
	</tr>
</table>

<h4>Common
parameters limiting results</h4>

<p>Three common parameters allow limiting the result of
functions. These are <strong>lowlim</strong> for setting a
lower limit, <strong>uplim</strong> for setting an upper limit and <strong>threshold</strong> to
define a threshold. The limit parameters are always optional. They are provided
by all policy functions except Elig
and Allocate. None of the system functions provides
them. The descriptions of the functions in section <a
href="EM_FC_SummaryOfFunctions.htm">EUROMOD Functions - Summary of functions
and their parameters</a> indicate whether a special function provides the
parameters or not. The examples below illustrate the usage of the limit
parameters.</p>

<table class="spine">
	<caption>Example 3: Lower and upper limit</caption>
	<tr class="policy">
		<td>Policy</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>ArithOp</td>
		<td class="on">on</td>
		<td></td>
	</tr>
	<tr>
		<td>formula</td>
		<td>stm01_s</td>
		<td></td>
	</tr>
	<tr>
		<td>lowlim</td>
		<td>100#m</td>
		<td></td>
	</tr>
	<tr>
		<td>uplim</td>
		<td>1000#m</td>
		<td></td>
	</tr>
	<tr>
		<td>output_var</td>
		<td>stm02_s</td>
		<td></td>
	</tr>
	<tr>
		<td>TAX_UNIT</td>
		<td>tu_individual_sl</td>
		<td></td>
	</tr>
</table>

<p>In example 3 the output variable stm02_s (s=system, tm=temporary, _s=simulated) is set to
100 in all cases where the (input) variable stm01_s
is smaller than 100 (lower limit applies). It is set to the value of stm01_s in all cases where stm01_s
is between 100 and 1000 (no limit applies). And it is set to 1000 in all cases
where stm01_s is greater than 1000 (upper limit
applies).</p>

<table class="spine">
	<caption>Example 4: Threshold</caption>
	<tr class="policy">
		<td>Policy</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>ArithOp</td>
		<td class="on">on</td>
		<td></td>
	</tr>
	<tr>
		<td>formula</td>
		<td>stm01_s</td>
		<td></td>
	</tr>
	<tr>
		<td>threshold</td>
		<td>100#m</td>
		<td></td>
	</tr>
	<tr>
		<td>output_var</td>
		<td>stm02_s</td>
		<td></td>
	</tr>
	<tr>
		<td>TAX_UNIT</td>
		<td>tu_individual_sl</td>
		<td></td>
	</tr>
</table>


<p>In example 4 the output variable stm02_s is set to zero in all cases where the (input)
variable stm01_s is smaller than 100 (threshold
applies) and to the value of stm01_s
in all other cases (threshold does not apply).</p>


<table class="spine">
	<caption>Example 5: Threshold and lower limit</caption>
	<tr class="policy">
		<td>Policy</td>
		<td class="system">SL_demo</td>
		<td>Comment</td>
	</tr>
	<tr class="function">
		<td>ArithOp</td>
		<td class="on">on</td>
		<td></td>
	</tr>
	<tr>
		<td>formula</td>
		<td>stm01_s</td>
		<td></td>
	</tr>
	<tr>
		<td>threshold</td>
		<td>100#m</td>
		<td></td>
	</tr>
	<tr>
		<td>lowlim</td>
		<td>50#m</td>
		<td></td>
	</tr>
	<tr>
		<td>output_var</td>
		<td>stm02_s</td>
		<td></td>
	</tr>
	<tr>
		<td>TAX_UNIT</td>
		<td>tu_individual_sl</td>
		<td></td>
	</tr>
</table>

<p>Example 5 shows the combined use of
a threshold and a lower limit. In this case the output variable is not set to
zero if it is below the threshold, but to the value of the lower limit. This
means that stm02_s is set to 50 in all cases where
the (input) variable stm01_s is smaller than 100 and
to the value of stm01_s in all other cases.</p>

<p>For the sake of completeness another, very rarely used
common parameter, <strong>limpriority</strong>, should be mentioned. If there is a
conflict between upper and lower limit, i.e. the upper limit is below the lower
limit (which is nonsense if limits are defined by amounts, but may be the case
if they are defined by variables or incomelists)
usually a warning is issued. This can be avoided by using the parameter limpriority. Possible values are
<i>upper</i>, i.e.
the upper limit dominates in conflict cases, or <i>lower</i> i.e. the lower limit dominates. If the parameter is not
defined and the warning ignored, the upper limit dominates.</p>

<h4><a name="_Ref223934029"></a>The common parameter TAX_UNIT</h4>

<p>The parameter <strong>TAX_UNIT</strong> allows for the definition of the assessment unit a
function refers to. Assessment units range from individual units (each person
builds her/his own unit) over various definitions of family units to household
units (all persons of the household belong to the same unit). The possibility
of defining the assessment unit not only on policy level, but on function level
is one of the features, which make EUROMOD especially flexible. In fact it is
even possible to change the assessment unit within a function. The other side
of the coin is however, that it takes some learning effort and experience to
understand the consequential complexity. The sections <a
href="EM_FC_ParameterValues.htm">EUROMOD Functions - Parameter values and the
assessment unit</a> and <a href="EM_FC_DefVar_DefConst.htm">EUROMOD Functions - The
system functions DefTU and UpdateTU</a>
deal with these complexities. The former explains how parameters are
interpreted if the assessment unit consists of more than one person and to
which person within the unit the function result is assigned. The latter
describes how an assessment unit is defined.</p>

<p>The parameter is compulsory for all policy functions, i.e.
must be indicated. System functions do not have a TAX_UNIT
parameter, except for the function DefOuput,
where output is printed on the level of the indicated assessment unit (see <a
href="EM_FC_DefOutput.htm">EUROMOD Functions - The system function DefOutput</a>). Whether a special function has a TAX_UNIT parameter or not is indicated in the descriptions
of the functions in section <a href="EM_FC_SummaryOfFunctions.htm">EUROMOD
Functions - Summary of functions and their parameters</a>.</p>

<h4><a name="_Ref237244239"></a>Common parameters controlling whether a function is
processed</h4>

<p>The <strong>switch</strong> is
another feature of functions, which is not literally a parameter. As the
examples show, functions can be &quot;switched off&quot;, i.e. they are skipped
by the model run. In fact the switch has four
possible states:</p>
<ul>
<li><strong>on</strong> (or 1): function is switched on</li>
<li><strong>off</strong> (or 0): function is switched off</li>
<li><strong>toggle</strong> (or 2): function is initially switched off, but may be
switched on later (using the function ChangeParam).
toggle tells the model that
the parameters of the function should be read and checked, which would not be
the case if the function were switched off. For a more detailed explanation see
section <a href="EM_FC_ChangeParam.htm">EUROMOD Functions - The special
function ChangeParam</a>.</li>

<li><strong>n/a</strong>: function is not applicable. With respect to treatment
of the function by the model run this state is equal to the off state. However,
it stresses that the function is not only switched off (for whatever reason)
but has no meaning for the respective system. Moreover, the user interface uses
the <i>n/a</i>
state in its export/import functionalities to assess whether a function is
relevant for a system (see <a href="EM_WW_ImportingExportingSystems.htm">Working
with EUROMOD - Importing and exporting systems</a>).</li>
</ul>

<p>Finally, the parameter <strong>run_cond</strong>
allows for a conditional processing of the function. That means the function is
only carried out if the respective condition is fulfilled. The functionality of
the parameter should not be confused with the task of the parameters affecting
&quot;eligibility&quot; described above. The latter specify conditions, which
are individual or household based and therewith determine whether a function is
processed for a specific unit. In contrast, the parameter run_cond is a conditional switch. Consequently,
differently from eligibility conditions, run conditions are not intended to be
used with individual/household based operators.<a
href="#_ftn1" name="_ftnref1" title="">[1]</a>
Also note that, the output variable of a function, which does not fulfil the
run condition, stays uninitialised (analogous to switched off functions). Typically the parameter run_cond is used in more
advanced applications of the model, e.g. loops, where the condition refers to a
specific processing state (e.g. iteration of the loop) or some other global
condition (e.g. some total is reached/not reached). This optional parameter is
available for all policy functions as well as several system functions (the
function descriptions in section <a href="EM_FC_SummaryOfFunctions.htm">EUROMOD
Functions - Summary of functions and their parameters</a> indicate for which).</p>

<p>&nbsp;</p>

</div>

<div>

<hr align=left size=1 width="33%">

<p class="footnote"><a href="#_ftnref1" name="_ftn1" title="">[1]</a>Note that the programme does issue a warning if
individual/household specific operators are used with <i>run_cond</i>. If this warning is
ignored, the condition is fulfilled, if the assessment unit fulfils the
condition. Conditions which refer to a smaller unit are evaluated for the head
of unit (respectively the unit she/he belongs to). As a consequence, taking
this and the fact that the output variable stays uninitalised
if the run condition is not fulfilled, <i>run_cond</i> could in principle be used as a shortcut instead of
<i>elig</i>. This
is however considered as bad practise and only recommended for testing
purposes.</p>

</div>

</body>

</html>
