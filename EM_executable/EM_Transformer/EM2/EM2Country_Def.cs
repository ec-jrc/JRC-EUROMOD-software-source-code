using System;
using System.Collections.Generic;

namespace EM_Transformer
{
    /// <summary>
    /// class for reading an EM2 country-XML-file into an EM2Country.Content structure (see below)
    /// note that all EM2->EM3 adaptations concerning CONTENT are summarised in the EM23Adaptations-class
    /// thus this class is only responsible for adaptations concerning the new STRUCTURE
    /// i.e. essentially from n pol/fun/par for n systems in EM2 to (initially) 1 pol/fun/par for all systems in EM3
    /// </summary>
    public partial class EM2Country
    {
        /// <summary> the complete content of a EM2 country-XML-file </summary>
        public class Content
        {
            // country-properties (name, shortname, ...)
            public EM2Item general = new EM2Item();

            // sys/pol/fun/par-properties:
            // dic-key = id
            // dic-value (EM2Item) = id (redundant), name, other properties (comment, ...)
            public Dictionary<string, EM2Item> systems = new Dictionary<string, EM2Item>();
            public Dictionary<string, EM2Item> policies = new Dictionary<string, EM2Item>();
            public Dictionary<string, EM2Item> functions = new Dictionary<string, EM2Item>();
            public Dictionary<string, EM2Item> parameters = new Dictionary<string, EM2Item>();
            public Dictionary<string, string> referencePolicies = new Dictionary<string, string>();

            // values per sys for pol/fun/par, i.e. sys-id, item-id, order, switch (fun/pol) or value (par)
            public List<SysItem> sysPol = new List<SysItem>();
            public List<SysItem> sysFun = new List<SysItem>();
            public List<SysItem> sysPar = new List<SysItem>();

            // uprating ind properies:
            // dic-key = id
            // dic-value (EM2Item) = id (redundant), name (i.e. reference), other properties (i.e. description, comment)
            public Dictionary<string, EM2Item> upInd = new Dictionary<string, EM2Item>();
            // uprating ind values per year: up-ind-id, year, value
            // note: not generated by this class' Read-function, but by EM23Adapt class
            public List<Dictionary<string, string>> upIndVal = new List<Dictionary<string, string>>();

            // indirect taxes properies: same structure as uprating ind
            public Dictionary<string, EM2Item> indTax = new Dictionary<string, EM2Item>();
            public List<Dictionary<string, string>> indTaxVal = new List<Dictionary<string, string>>();

            // external statistics properties: similar structure as uprating indices, but with extra dict for numbers
            public Dictionary<string, EM2Item> exStat = new Dictionary<string, EM2Item>();
            public List<Dictionary<string, string>> exStatVal = new List<Dictionary<string, string>>();
            public List<Dictionary<string, string>> exStatNum = new List<Dictionary<string, string>>();

            // look groups
            public Dictionary<string, EM2Item> lookGroup = new Dictionary<string, EM2Item>();
            public List<Tuple<string, string>> lookGroupPol = new List<Tuple<string, string>>();
            public List<Tuple<string, string>> lookGroupFun = new List<Tuple<string, string>>();
            public List<Tuple<string, string>> lookGroupPar = new List<Tuple<string, string>>();

            // extensions
            public List<Tuple<string, string, string>> extensionPol = new List<Tuple<string, string, string>>();
            public List<Tuple<string, string, string>> extensionFun = new List<Tuple<string, string, string>>();
            public List<Tuple<string, string, string>> extensionPar = new List<Tuple<string, string, string>>();

            // conditional formatting is not read, because it is probably not needed for EM2
        }

        /// <summary> structure to store the system-dependent values of policies, functions and parameters </summary>
        public class SysItem
        {
            public string sysID = string.Empty;
            public string itemID = string.Empty;    // policy/function/parameter-id
            public string order = string.Empty;
            public string value = string.Empty;     // for policies and functions: switch, for parameters: value
        }

        private enum ELEMENT_TYPE { SUBTREE, SYSVAL, PROPERTY, NO } // helping structure (see usage in Read-function)
    }
}
